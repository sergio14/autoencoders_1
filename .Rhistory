library ( "neuralnet" )
require ( Metrics )
corrplot(data, method="circle")
library ( "neuralnet" )
require ( Metrics )
keeps<-c("crim","indus","nox","rm",
"age","dis","tax","ptratio","lstat"
,"medv")
data<-data[keeps]
library ( "neuralnet" )
require ( Metrics )
keeps<-c("crim","indus","nox","rm","age","dis","tax","ptratio","lstat","medv")
data<-data[keeps]
library ( "neuralnet" )
require ( Metrics )
data("Boston",package="MASS")
data<-Boston
keeps<-c("crim","indus","nox","rm","age","dis","tax","ptratio","lstat","medv")
data<-data[keeps]
#median value of owner-occupied homes.
library(corrplot)
corrplot(data, method="circle")
head(data)
library ( "neuralnet" )
require ( Metrics )
data("Boston",package="MASS")
data<-Boston
keeps<-c("crim","indus","nox","rm","age","dis","tax","ptratio","lstat","medv")
data<-data[keeps]
#median value of owner-occupied homes.
library(corrplot)
M<-cor(data)
corrplot(M, method="circle")
cor,plot(M, method="circle")
cor.plot(M, method="circle")
library(psych)
M<-cor(data)
cor.plot(M, method="circle")
pairs(M,upper.panel=panel.cor,diag.panel=panel.hist)
pairs(M,upper.panel=M,diag.panel=panel.hist)
panel.cor
pairs(data,upper.panel=M,diag.panel=panel.hist)
pairs(data,upper.panel=panel.cor,diag.panel=panel.hist)
pairs(data,diag.panel=panel.hist)
pairs(data)
pairs.panels(data[1:5])
library ( "neuralnet" )
require ( Metrics )
data("Boston",package="MASS")
data<-Boston
keeps<-c("crim","indus","nox","rm","age","dis","tax","ptratio","lstat","medv")
data<-data[keeps]
#median value of owner-occupied homes.
#library(corrplot)
library(psych)
#M<-cor(data)
#cor.plot(M, method="circle")
pairs.panels(data[1:5])
f<-medv~crim+indus+nox+rm+age+
dis+tax+ptratio+lstat
set.seed(2016)
n=nrow(data)
train<-sample(1:n,400,FALSE)
fit<-neuralnet(f,
data=data[train,],
hidden=c(10,12,20),
algorithm="rprop+",
err.fct="sse",
act.fct="logistic",
threshold=0.1,
linear.output=TRUE)
f<-medv~crim+indus+nox+rm+age+
dis+tax+ptratio+lstat
set.seed(2016)
n=nrow(data)
train<-sample(1:n,400,FALSE)
fit<-neuralnet(f,
data=data[train,],
hidden=c(10,12,20),
algorithm="backprop",
learningrate =0.01
err.fct="sse",
f<-medv~crim+indus+nox+rm+age+
dis+tax+ptratio+lstat
set.seed(2016)
n=nrow(data)
train<-sample(1:n,400,FALSE)
fit<-neuralnet(f,
data=data[train,],
hidden=c(10,12,20),
algorithm="backprop",
learningrate =0.01,
err.fct="sse",
act.fct="logistic",
threshold=0.1,
linear.output=TRUE)
f<-medv~crim+indus+nox+rm+age+
dis+tax+ptratio+lstat
set.seed(2016)
n=nrow(data)
train<-sample(1:n,400,FALSE)
fit2<-neuralnet(f,
data=data[train,],
hidden=c(10,12,20),
algorithm="backprop",
learningrate =0.01,
err.fct="sse",
act.fct="logistic",
threshold=0.1,
linear.output=TRUE)
f<-medv~crim+indus+nox+rm+age+
dis+tax+ptratio+lstat
set.seed(2016)
n=nrow(data)
train<-sample(1:n,400,FALSE)
fit2<-neuralnet(f,
data=data[train,],
hidden=c(10,12,20),
algorithm="backprop",
learningrate =0.01,
err.fct="sse",
act.fct="logistic",
threshold=0.1,
linear.output=FALSE)
fit2
pred<-compute(fit,data[-train,1:9])
data[-train,1:9]
fit
pred<-compute(fit,data[-train,1:9])
?neuralnet
f<-medv~crim+indus+nox+rm+age+
dis+tax+ptratio+lstat
set.seed(2016)
n=nrow(data)
train<-sample(1:n,400,FALSE)
fit<-neuralnet(f,
data=data[train,],
hidden=c(10,12,20),
algorithm="rprop+",
err.fct="sse",
act.fct="logistic",
threshold=0.1,
linear.output=TRUE)
data("Boston",package="MASS")
data <- Boston
keeps <- c("crim", "indus", "nox", "rm" , "age", "dis", "tax" ,"ptratio", "lstat" ,"medv" )
data <- data[keeps]
f <- medv ~ crim + indus + nox + rm + age + dis + tax + ptratio + lstat
set.seed(2016)
n = nrow(data)
train <- sample(1:n, 400, FALSE)
# Scale data. Scaling parameters are stored in this matrix for later.
scaledData <- scale(data)
fit<- neuralnet::neuralnet(f, data = scaledData[train ,], hidden=9,
algorithm = "rprop+", err.fct = "sse", act.fct = "logistic",
threshold = 0.01, linear.output=TRUE, lifesign = "full")
pred <- neuralnet::compute(fit,scaledData[-train, 1:9])
scaledResults <- pred$net.result * attr(scaledData, "scaled:scale")["medv"]
+ attr(scaledData, "scaled:center")["medv"]
cleanOutput <- data.frame(Actual = data$medv[-train],
Prediction = scaledResults,
diff = abs(scaledResults - data$medv[-train]))
# Show some results
summary(cleanOutput)
set.seed(2016)
n = nrow(data)
train <- sample(1:n, 400, FALSE)
# Scale data. Scaling parameters are stored in this matrix for later.
scaledData <- scale(data)
fit2<- neuralnet::neuralnet(f, data = scaledData[train ,], hidden=9,
algorithm = "backprop", learningrate =0.01,err.fct = "sse", act.fct = "logistic",
threshold = 0.01, linear.output=TRUE, lifesign = "full")
data("Boston",package="MASS")
data <- Boston
keeps <- c("crim", "indus", "nox", "rm" , "age", "dis", "tax" ,"ptratio", "lstat" ,"medv" )
data <- data[keeps]
f <- medv ~ crim + indus + nox + rm + age + dis + tax + ptratio + lstat
set.seed(2016)
n = nrow(data)
train <- sample(1:n, 400, FALSE)
# Scale data. Scaling parameters are stored in this matrix for later.
scaledData <- scale(data)
fit<- neuralnet::neuralnet(f, data = scaledData[train ,], hidden=c(10, 12, 20),
algorithm = "rprop+", err.fct = "sse", act.fct = "logistic",
threshold = 0.01, linear.output=TRUE, lifesign = "full")
pred <- neuralnet::compute(fit,scaledData[-train, 1:9])
set.seed(2016)
n = nrow(data)
train <- sample(1:n, 400, FALSE)
# Scale data. Scaling parameters are stored in this matrix for later.
scaledData <- scale(data)
fit2<- neuralnet::neuralnet(f, algorithm = "backprop",
learningrate = 0.0001)
set.seed(2016)
n = nrow(data)
train <- sample(1:n, 400, FALSE)
# Scale data. Scaling parameters are stored in this matrix for later.
scaledData <- scale(data)
fit2<- neuralnet::neuralnet(f, data = scaledData[train ,], hidden=9,
algorithm = "backprop",
learningrate = 0.0001)
pred2 <- neuralnet::compute(fit2,scaledData[-train, 1:9])
data("Boston",package="MASS")
data <- Boston
keeps <- c("crim", "indus", "nox", "rm" , "age", "dis", "tax" ,"ptratio", "lstat" ,"medv" )
data <- data[keeps]
f <- medv ~ crim + indus + nox + rm + age + dis + tax + ptratio + lstat
set.seed(2016)
n = nrow(data)
train <- sample(1:n, 400, FALSE)
# Scale data. Scaling parameters are stored in this matrix for later.
scaledData <- scale(data)
fit<- neuralnet::neuralnet(f, data = scaledData[train ,], hidden=c(10 ,12 ,20),
algorithm = "rprop+", err.fct = "sse", act.fct = "logistic",
threshold = 0.01, linear.output=TRUE, lifesign = "full")
pred <- neuralnet::compute(fit,scaledData[-train, 1:9])
scaledResults <- pred$net.result * attr(scaledData, "scaled:scale")["medv"]
+ attr(scaledData, "scaled:center")["medv"]
cleanOutput <- data.frame(Actual = data$medv[-train],
Prediction = scaledResults,
diff = abs(scaledResults - data$medv[-train]))
# Show some results
summary(cleanOutput)
set.seed(2016)
n = nrow(data)
train <- sample(1:n, 400, FALSE)
# Scale data. Scaling parameters are stored in this matrix for later.
scaledData <- scale(data)
fit2<- neuralnet::neuralnet(f, data = scaledData[train ,], hidden=9,
algorithm = "backprop",
learningrate = 0.0001)
pred2 <- neuralnet::compute(fit2,scaledData[-train, 1:9])
scaledResults <- pred$net.result * attr(scaledData, "scaled:scale")["medv"]
+ attr(scaledData, "scaled:center")["medv"]
cleanOutput <- data.frame(Actual = data$medv[-train],
Prediction = scaledResults,
diff = abs(scaledResults - data$medv[-train]))
# Show some results
round(cor(pred$net.result,data[-train,10])^2,6)
mse(data[-train,10],pred$net.result)
rmse(data[-train,10],pred$net.result)
scaledResults <- pred$net.result * attr(scaledData, "scaled:scale")["medv"]
+ attr(scaledData, "scaled:center")["medv"]
cleanOutput <- data.frame(Actual = data$medv[-train],
Prediction = scaledResults,
diff = abs(scaledResults - data$medv[-train]))
# Show some results
round(cor(pred$net.result,scaledData[-train,10])^2,6)
mse(scaledData[-train,10],pred$net.result)
rmse(scaledData[-train,10],pred$net.result)
cleanOutput
scaledData <- cbind(scale(data%>%select(-medv)), data%>%select(medv))
(data%>%select(-medv)
)
data%>%dplyr::select(-medv))
data%>%dplyr::select(-medv)
scaledData <- cbind(scale(data%>%dplyr::select(-medv)), data%>%dplyr::select(medv))
fit<- neuralnet::neuralnet(f, data = scaledData[train ,], hidden=c(10 ,12 ,20),
algorithm = "rprop+", err.fct = "sse", act.fct = "logistic",
threshold = 0.01, linear.output=TRUE, lifesign = "full")
head(scaledData )
scaledData <- cbind(scale(data%>%dplyr::select(-medv)), data%>%dplyr::select(medv)%>%log(medv))
scaledData <- cbind(scale(data%>%dplyr::select(-medv)), data%>%dplyr::select(medv)%>%mutate(medv=log(medv))
fit<- neuralnet::neuralnet(f, data = scaledData[train ,], hidden=c(10 ,12 ,20),
scaledData <- cbind(scale(data%>%dplyr::select(-medv)), data%>%dplyr::select(medv)%>%mutate(medv=log(medv)))
fit<- neuralnet::neuralnet(f, data = scaledData[train ,], hidden=c(10 ,12 ,20),
algorithm = "rprop+", err.fct = "sse", act.fct = "logistic",
threshold = 0.01, linear.output=TRUE, lifesign = "full")
pred <- neuralnet::compute(fit,scaledData[-train, 1:9])
pred
exp(pred)
vaplly(pred, exp())
vapply(pred, exp())
vapply(pred, exp
)
vapply(pred, FUN=exp)
class(pred)
pred$net.result
exp(pred$net.result)
scaledResults
round(cor(exp(pred$net.result),scaledData[-train,10])^2,6)
mse(scaledData[-train,10],exp(pred$net.result))
scaledData
round(cor(exp(pred$net.result),Data[-train,10])^2,6)
round(cor(exp(pred$net.result),data[-train,10])^2,6)
mse(data[-train,10],exp(pred$net.result))
rmse(data[-train,10],exp(pred$net.result))
scaledResults <- pred$net.result * attr(scaledData, "scaled:scale")["medv"]
data("Boston",package="MASS")
data <- Boston
keeps <- c("crim", "indus", "nox", "rm" , "age", "dis", "tax" ,"ptratio", "lstat" ,"medv" )
data <- data[keeps]
f <- medv ~ crim + indus + nox + rm + age + dis + tax + ptratio + lstat
set.seed(2016)
n = nrow(data)
train <- sample(1:n, 400, FALSE)
# Scale data. Scaling parameters are stored in this matrix for later.
scaledData <- cbind(scale(data%>%dplyr::select(-medv)), data%>%dplyr::select(medv)%>%mutate(medv=log(medv)))
fit<- neuralnet::neuralnet(f, data = scaledData[train ,], hidden=c(10 ,12 ,20),
algorithm = "rprop+", err.fct = "sse", act.fct = "logistic",
threshold = 0.01, linear.output=TRUE, lifesign = "full")
pred <- neuralnet::compute(fit,scaledData[-train, 1:9])
# Show some results
round(cor(exp(pred$net.result),data[-train,10])^2,6)
mse(data[-train,10],exp(pred$net.result))
rmse(data[-train,10],exp(pred$net.result))
data[-train,10]
exp(pred$net.result)
exp(pred$net.result)
head(data)
plot(data[-train,10], exp(pred$net.result))
lm(f,data = scaledData[train ,] )
linMod<-lm(f,data = scaledData[train ,] )
pred <- neuralnet::compute(fit,scaledData[-train, 1:9])
# Show some results
round(cor(exp(pred$net.result),data[-train,10])^2,6)
mse(data[-train,10],exp(pred$net.result))
rmse(data[-train,10],exp(pred$net.result))
plot(data[-train,10], exp(pred$net.result))
predLin<- predict(linMod,scaledData[-train, 1:9])
linMod<-lm(f,data = scaledData[train ,] )
predLin<- predict(linMod,scaledData[-train, 1:9])
predLin<- lm::predict(linMod,scaledData[-train, 1:9])
linMod<-lm(f,data = scaledData[train ,] )
predLin<-predict(linMod,scaledData[-train, 1:9])
?predict
linMod
scaledData[-train, 1:9]
predLin<-predict(linMod,scaledData[-train, 1:9])
class(scaledData)
linMod<-lm(f,data = scaledData[train ,] )
linMod
predLin<-predict(linMod,scaledData[train,])
lm(f,data = scaledData[train ,] )
NEWDF<-
predLin<-predict(linMod,)
NEWDF<-scaledData[train, 1:9]
predLin<-predict(linMod,NEWDF)
predLin<-stats::predict(linMod,NEWDF)
predLin
data("Boston",package="MASS")
data <- Boston
keeps <- c("crim", "indus", "nox", "rm" , "age", "dis", "tax" ,"ptratio", "lstat" ,"medv" )
data <- data[keeps]
f <- medv ~ crim + indus + nox + rm + age + dis + tax + ptratio + lstat
set.seed(2016)
n = nrow(data)
train <- sample(1:n, 400, FALSE)
# Scale data. Scaling parameters are stored in this matrix for later.
scaledData <- cbind(scale(data%>%dplyr::select(-medv)), data%>%dplyr::select(medv)%>%mutate(medv=log(medv)))
head(scaledData)
fit<- neuralnet::neuralnet(f, data = scaledData[train ,], hidden=c(10 ,12 ,20),
algorithm = "rprop+", err.fct = "sse", act.fct = "logistic",
threshold = 0.01, linear.output=TRUE, lifesign = "full")
pred <- neuralnet::compute(fit,scaledData[-train, 1:9])
head(pred)
exp(pred$net.result)
head(data)
data[-train,10]
exp(pred$net.result)
round(cor(exp(pred$net.result),data[-train,10])^2,6)
mse(data[-train,10],exp(pred$net.result))
rmse(data[-train,10],exp(pred$net.result))
Show some results
# Show some results
round(cor(exp(pred$net.result),data[-train,10])^2,6)
mse(data[-train,10],exp(pred$net.result))
rmse(data[-train,10],exp(pred$net.result))
plot(data[-train,10], exp(pred$net.result))
linMod<-lm(f,data = scaledData[train ,] )
NEWDF<-scaledData[train, 1:9]
predLin<-stats::predict(linMod,NEWDF)
predLin
linMod<-lm(f,data = scaledData[train ,] )
NEWDF<-scaledData[train, 1:9]
predLin<-stats::predict(linMod,NEWDF)
# Show some results
round(cor(exp(predLin),data[-train,10])^2,6)
exp(predLin)
NEWDF<-scaledData[-train, 1:9]
predLin<-stats::predict(linMod,NEWDF)
round(cor(exp(predLin),data[-train,10])^2,6)
# Show some results
round(cor(exp(predLin),data[-train,10])^2,6)
mse(data[-train,10],exp(predLin))
rmse(data[-train,10],exp(predLin))
plot(data[-train,10], exp(predLin))
data("Boston",package="MASS")
data <- Boston
keeps <- c("crim", "indus", "nox", "rm" , "age", "dis", "tax" ,"ptratio", "lstat" ,"medv" )
data <- data[keeps]
f <- medv ~ crim + indus + nox + rm + age + dis + tax + ptratio + lstat
set.seed(2016)
n = nrow(data)
train <- sample(1:n, 400, FALSE)
# Scale data. Scaling parameters are stored in this matrix for later.
scaledData <- cbind(scale(data%>%dplyr::select(-medv)), data%>%dplyr::select(medv)%>%mutate(medv=log(medv)))
fit<- neuralnet::neuralnet(f, data = scaledData[train ,], hidden=c(10 ,12 ,20),
algorithm = "rprop+", err.fct = "sse", act.fct = "logistic",
threshold = 0.005, linear.output=TRUE, lifesign = "full")
pred <- neuralnet::compute(fit,scaledData[-train, 1:9])
# Show some results
round(cor(exp(pred$net.result),data[-train,10])^2,6)
mse(data[-train,10],exp(pred$net.result))
rmse(data[-train,10],exp(pred$net.result))
plot(data[-train,10], exp(pred$net.result))
library(deepnet)
library(deepnet)
library(deepnet)
set.seed(2016)
X=data[train,1:9]
Y=data[train,10]
HereishowtocreateaDNN:
fitB<-nn.train(x=X,y=Y,
initW=NULL,
initB=NULL,
hidden=c(10,12,20),
learningrate=0.58,
momentum=0.74,
learningrate_scale=1,
activationfun="sigm",
output="linear",
numepochs=970,
batchsize=60,
hidden_dropout=0,
visible_dropout=0)
library(deepnet)
set.seed(2016)
X=data[train,1:9]
Y=data[train,10]
fitB<-nn.train(x=X,y=Y,
initW=NULL,
initB=NULL,
hidden=c(10,12,20),
learningrate=0.58,
momentum=0.74,
learningrate_scale=1,
activationfun="sigm",
output="linear",
numepochs=970,
batchsize=60,
hidden_dropout=0,
visible_dropout=0)
class(X
)
library(deepnet)
set.seed(2016)
X=as.matrix(data[train,1:9])
Y=as.matrix(data[train,10])
fitB<-nn.train(x=X,y=Y,
initW=NULL,
initB=NULL,
hidden=c(10,12,20),
learningrate=0.58,
momentum=0.74,
learningrate_scale=1,
activationfun="sigm",
output="linear",
numepochs=970,
batchsize=60,
hidden_dropout=0,
visible_dropout=0)
Xtest<-data[-train,1:9]
predB<-nn.predict(fitB,Xtest)
round(cor(predB,data[-train,10])^2,6)
predB
Xtest<-data[-train,1:9]
predB<-nn.predict(fitB,Xtest)
round(cor(predB,data[-train,10])^2,6)
mse(data[-train,10],predB)
rmse(data[-train,10],predB)
library(deepnet)
set.seed(2016)
X=as.matrix(scaledData[train,1:9])
Y=as.matrix(scaledData[train,10])
fitB<-nn.train(x=X,y=Y,
initW=NULL,
initB=NULL,
hidden=c(10,12,20),
learningrate=0.58,
momentum=0.74,
learningrate_scale=1,
activationfun="sigm",
output="linear",
numepochs=970,
batchsize=60,
hidden_dropout=0,
visible_dropout=0)
Xtest<-scaledData[-train,1:9]
predB<-nn.predict(fitB,Xtest)
round(cor(predB,data[-train,10])^2,6)
mse(data[-train,10],predB)
rmse(data[-train,10],predB)
linMod<-lm(f,data = scaledData[train ,] )
NEWDF<-scaledData[-train, 1:9]
predLin<-stats::predict(linMod,NEWDF)
# Show some results
round(cor(exp(predLin),data[-train,10])^2,6)
mse(data[-train,10],exp(predLin))
rmse(data[-train,10],exp(predLin))
plot(data[-train,10], exp(predLin))
predB
round(cor(exp(predB),data[-train,10])^2,6)
mse(data[-train,10],exp(predB))
rmse(data[-train,10],exp(predB))
plot(data[-train,10], exp(predB))
Xtest<-scaledData[-train,1:9]
predB<-nn.predict(fitB,Xtest)
round(cor(exp(predB),data[-train,10])^2,6)
mse(data[-train,10],exp(predB))
rmse(data[-train,10],exp(predB))
plot(data[-train,10], exp(predB))
